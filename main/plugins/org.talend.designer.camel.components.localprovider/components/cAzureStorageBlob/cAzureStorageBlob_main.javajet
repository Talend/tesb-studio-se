<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IElementParameter
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.designer.codegen.config.CamelEndpointBuilder
    java.util.List
    java.util.Map
    java.io.UnsupportedEncodingException
    java.net.URLEncoder
" 
%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode) codeGenArgument.getArgument();
    String cid = node.getUniqueName();

    CamelEndpointBuilder builder = CamelEndpointBuilder.getBuilder();

	String accountName = ElementParameterParser.getValue(node, "__STORAGE_ACCOUNT_NAME__");
    String containerName = ElementParameterParser.getValue(node, "__STORAGE_CONTAINER_NAME__");

    builder.setComponent("azure-blob");
    builder.useDoubleSlash(false);
    builder.setName(accountName.concat("+\"/\"+").concat(containerName));

    builder.addParam("credentials", "\"#credentials_" + cid + "\"");
	
	String operation = ElementParameterParser.getValue(node, "__OPERATION__");
	boolean setOperation = (operation !=null && !operation.isEmpty());
	if (setOperation){
	    builder.addParam("operation", "\"" + operation + "\"");
	}
	
	String blobOffset  = ElementParameterParser.getValue(node, "__BLOB_OFFSET__");
	boolean setBlobOffset = (blobOffset !=null && !blobOffset.isEmpty() && blobOffset !="\"\"");
	if (setBlobOffset){
	    builder.addParam("blobOffset", blobOffset);
	}	
	
	String closeStreamAfterRead = ElementParameterParser.getValue(node, "__CLOSE_STREAM_AFTER_READ__");
    if ("true".equals(closeStreamAfterRead)) {
        builder.addParam("closeStreamAfterRead", "\"" + closeStreamAfterRead + "\"");
    }
	
	String closeStreamAfterWrite = ElementParameterParser.getValue(node, "__CLOSE_STREAM_AFTER_WRITE__");
    if ("true".equals(closeStreamAfterWrite)) {
        builder.addParam("closeStreamAfterWrite", "\"" + closeStreamAfterWrite + "\"");
    }

	String dataLength  = ElementParameterParser.getValue(node, "__DATA_LENGTH__");
	boolean setDataLength = (dataLength !=null && !dataLength.isEmpty() && dataLength !="\"\"");
	if (setDataLength){
	    builder.addParam("dataLength", dataLength);
	}		
	
	String fileDir  = ElementParameterParser.getValue(node, "__FILE_DIR__");
	boolean setFileDir = (fileDir !=null && !fileDir.isEmpty() && fileDir !="\"\"");
	if (setFileDir){
	    builder.addParam("fileDir", fileDir);
	}	

	String bridgeErrorHandler = ElementParameterParser.getValue(node, "__BRIDGE_ERROR_HANDLER__");
    if ("true".equals(bridgeErrorHandler)) {
        builder.addParam("bridgeErrorHandler", "\"" + bridgeErrorHandler + "\"");
    }
	
	List<Map<String, String>> blobMetadataList = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__BLOB_METADATA__");
	if (blobMetadataList != null && !blobMetadataList.isEmpty()){
		builder.addParam("blobMetadata", "\"#blobMetadata_" + cid + "\"");
	}
	
	String streamReadSize  = ElementParameterParser.getValue(node, "__STREAM_READ_SIZE__");
	boolean setStreamReadSize = (streamReadSize !=null && !streamReadSize.isEmpty() && streamReadSize !="\"\"" );
	if (setStreamReadSize){
	    builder.addParam("streamReadSize", streamReadSize );
	}		
	
	String streamWriteSize  = ElementParameterParser.getValue(node, "__STREAM_WRITE_SIZE__");
	boolean setStreamWriteSize = (streamWriteSize !=null && !streamWriteSize.isEmpty() && streamWriteSize !="\"\"" );
	if (setStreamWriteSize){
	    builder.addParam("streamWriteSize", streamWriteSize );
	}		
	
	String useFlatListing = ElementParameterParser.getValue(node, "__USE_FLAT_LISTING__");
    if ("true".equals(useFlatListing)) {
        builder.addParam("useFlatListing", "\"" + useFlatListing + "\"");
    }
	
	String synchronous = ElementParameterParser.getValue(node, "__SYNCHRONOUS__");
    if ("true".equals(synchronous)) {
        builder.addParam("synchronous", "\"" + synchronous + "\"");
    }
	
	String blobPrefix  = ElementParameterParser.getValue(node, "__BLOB_PREFIX__");
	boolean setBlobPrefix = (blobPrefix !=null && !blobPrefix.isEmpty() && blobPrefix !="\"\"");
	if (setBlobPrefix){
	    builder.addParam("blobPrefix", blobPrefix );
	}	
	
    List<Map<String, String>> tableValues = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__URI_OPTIONS__");
    for (Map<String, String> map : tableValues) {
        String argName = map.get("NAME").trim();
        String argValue = map.get("VALUE").trim();
        if(argName.startsWith("\"") && argName.endsWith("\"") && argName.length() >= 2) {
            argName = argName.substring(1, argName.length() - 1);
        }
        builder.addParam(argName, argValue);
    }

    List<Map<String, String>> messageHeaders = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__MESSAGE_HEADERS__");

    String uri = builder.build();
   
    List< ? extends IConnection> conns = node.getIncomingConnections();

    if (conns.size() > 0 && messageHeaders.size() > 0) {
        StringBuilder sb1 = new StringBuilder();
        for (Map<String, String> map : messageHeaders) {
            String header = map.get("MESSAGE_HEADER");
            String value = map.get("MESSAGE_HEADER_VALUE");

            sb1.append(".setHeader(\"");
            sb1.append(header);
            sb1.append("\",");
            sb1.append("constant(");
            sb1.append(value);
            sb1.append("))");
        }
%>
    <%=sb1.toString()%>.to(<%=uri%>)

<% } else { %>
    <%
        if(conns.size()>0) {
    %>
            .to(<%=uri%>)
    <%
        } else {
    %>
            from(<%=uri%>)
    <%
        }
    %>
<%}%>