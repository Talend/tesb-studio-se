<%@ jet%>
<%
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
    boolean hasCredentials = false;
    boolean hasClientConfiguration = false;

    Map<String, String> awsTypeMap = new java.util.HashMap<String, String>() {
        {
            put("cAWSS3",  "com.amazonaws.services.s3.AmazonS3Client");
            put("cAWSSES", "com.amazonaws.services.simpleemail.AmazonSimpleEmailServiceClient");
            put("cAWSSQS", "com.amazonaws.services.sqs.AmazonSQSClient");
            put("cAWSSNS", "com.amazonaws.services.sns.AmazonSNSClient");
			put("cAWSMQ", "com.amazonaws.services.mq.AmazonMQ");
        }
    };

    boolean configClient = "true".equals(ElementParameterParser.getValue(node, "__CONFIG_CLIENT__"));

    List<Map<String,String>> clientConfiguration = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__CLIENT_CONFIGURATION__");
    String region = ElementParameterParser.getValue(node,"__REGION__");

    if (isLog4jEnabled) {
    %>
        log.info("<%=cid%> - Creating new connection.");
    <%
    }

    boolean inheritCredentials = "true".equals(ElementParameterParser.getValue(node, "__INHERIT_CREDENTIALS__"));
    if (inheritCredentials) {
        %>
        com.amazonaws.auth.AWSCredentialsProvider credentials_<%=cid%> = new com.amazonaws.auth.InstanceProfileCredentialsProvider();
        <%
    } else {
        String accessKey = ElementParameterParser.getValue(node, "__ACCESS_KEY__");
        String passwordFieldName = "__SECRET_KEY__";
        %>
        <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
        com.amazonaws.auth.AWSCredentials credentials_<%=cid%> = new com.amazonaws.auth.BasicAWSCredentials(<%=accessKey%>,decryptedPassword_<%=cid%>);
        <%
    }

    if (configClient && clientConfiguration.size()>0) {
        %>
        com.amazonaws.ClientConfiguration clientConfig_<%=cid%> = new com.amazonaws.ClientConfiguration();
        <%
        boolean setBuffer = false;
        for (Map<String,String> map :clientConfiguration) {
            String client_parameter = map.get("CLIENT_PARAMETER");
            String value = map.get("VALUE");
            if (!setBuffer && ("SocketSendBufferSizeHints".equals(client_parameter) || "SocketReceiveBufferSizeHints".equals(client_parameter))) {
                setBuffer=true;
                %>
                int socketSendBufferSizeHints_<%=cid%> = 0;
                int socketReceiveBufferSizeHints_<%=cid%> = 0;
            <%
            }
            if("SocketSendBufferSizeHints".equals(client_parameter)){
            %>
                socketSendBufferSizeHints_<%=cid%> = <%=value%>;
            <%
            }else if("SocketReceiveBufferSizeHints".equals(client_parameter)){
            %>
                socketReceiveBufferSizeHints_<%=cid%> = <%=value%>;
            <%
            }else if("Protocol".equals(client_parameter)){
            %>
                clientConfig_<%=cid%>.setProtocol(com.amazonaws.Protocol.<%=value.toUpperCase().replaceAll("\"","")%>);
            <%
            }else{
            %>
                clientConfig_<%=cid%>.set<%=client_parameter%>(<%=value%>);
            <%
            }
        }
        if (setBuffer) {
        %>
            clientConfig_<%=cid%>.setSocketBufferSizeHints(socketSendBufferSizeHints_<%=cid%>,socketReceiveBufferSizeHints_<%=cid%>);
        <%
        }
        hasClientConfiguration = true;
    }

    //generate different aws client for different aws components
    for (INode processNode : process.getGeneratingNodes()) {
        if (processNode.isActivate() && awsTypeMap.containsKey(processNode.getComponent().getName())) {
            String client = ElementParameterParser.getValue(processNode, "__AWS_CONNECTION_CLIENT__");
            if (cid.equals(client)) {
                String clientClass = awsTypeMap.get(processNode.getComponent().getName());
                String clientName = processNode.getComponent().getName() + "_" + cid;
                boolean isAWSMQ = processNode.getComponent().getName().equalsIgnoreCase("cAWSMQ");
                if(hasClientConfiguration && !isAWSMQ){
                %>
                    <%=clientClass%> <%=clientName%> = new <%=clientClass%>(credentials_<%=cid%>, clientConfig_<%=cid%>);
                <%
                }else if(!isAWSMQ){
                %>
                    <%=clientClass%> <%=clientName%> = new <%=clientClass%>(credentials_<%=cid%>);
                <%                      
                }
                if(region!=null && !region.isEmpty() && !"DEFAULT".equalsIgnoreCase(region) && !isAWSMQ){
                %>
                    <%=clientName%>.setRegion(com.amazonaws.regions.RegionUtils.getRegion(<%=region%>));
                <%
                }
				
				if (isAWSMQ){
				%>
				    <%=clientClass%> <%=clientName%> = com.amazonaws.services.mq.AmazonMQClientBuilder.standard()
                        .withCredentials(new com.amazonaws.auth.AWSCredentialsProvider() {
                            @Override
                            public void refresh() {
                            }
                            @Override
                            public com.amazonaws.auth.AWSCredentials getCredentials() {
                                return credentials_<%=cid%>;
                            }
				        })					
				    <% if(region!=null && !region.isEmpty() && !"DEFAULT".equalsIgnoreCase(region)){ %>
				        .withRegion(<%=region%>)
				    <% } %>
				    <% if(hasClientConfiguration){ %>
				        .withClientConfiguration(clientConfig_<%=cid%>)   
				    <% } %>	
				    .build();
				<%}
                %>
                    registry.put("<%=clientName%>", <%=clientName%>);
                <%       
                if(isLog4jEnabled){
                %>	
                    log.info("<%=clientName%> - Creating new connection successfully.");
                <%
                }          
                awsTypeMap.remove(processNode.getComponent().getName());//generate once
            }
        }
    }

%>
