<%@ jet
	imports="
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.process.INode
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn

		org.talend.designer.codegen.config.CodeGeneratorArgument

		java.util.List
		java.util.Map
	"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode) codeGenArgument.getArgument();

if (node.getProcess().getNodesOfType("tRESTRequestLoop").isEmpty()) { %>
	System.err.println("[WARN] nonsense: tRESTResponse component used without tRESTRequest component on the job");
<% } else {

	String cid = node.getUniqueName();
	List<IMetadataTable> metadatas = node.getMetadataList();
	if (null != metadatas && 0 < metadatas.size()) {
		IMetadataTable metadata = metadatas.get(0);
		if (null != metadata) {
			List<? extends IConnection> conns = node.getIncomingConnections();
			if (null != conns && 0 < conns.size()) {
				IConnection conn = conns.get(0);
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {

%>
	java.io.OutputStream outputStream_<%=cid%> = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_<%=cid%> = globalMap.containsKey("restResponse");

	if (null == outputStream_<%=cid%> && responseAlreadySent_<%=cid%>) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
<%

String selectedStatusCode = ElementParameterParser.getValue(node, "__STATUS_CODE__");
if ("CUSTOM".equals(selectedStatusCode)) { %>
		Integer restProviderStatusCode_<%=cid%> = <%= ElementParameterParser.getValue(node, "__CUSTOM_STATUS_CODE__")%>;
<% } else { %>
		Integer restProviderStatusCode_<%=cid%> = <%= selectedStatusCode%>;
<% } %>

		Object restProviderResponse_<%=cid%> = null;
<%
IMetadataColumn column = conn.getMetadataTable().getColumn("string");
if (null != column && "id_String".equals(column.getTalendType())) { %>
		restProviderResponse_<%=cid%> = <%=conn.getName()%>.string;
<%
}

column = conn.getMetadataTable().getColumn("body");
if (null != column) {
	if ("id_Document".equals(column.getTalendType())) { %>
		if (null != <%=conn.getName()%>.body) {
			restProviderResponse_<%=cid%> = <%=conn.getName()%>.body.getDocument();
		}
<%	} else { %>
		restProviderResponse_<%=cid%> = <%=conn.getName()%>.body;
<%	}
} %>

		java.util.Map<String, String> restProviderResponseHeaders_<%=cid%> = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_<%=cid%> = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";
<%
List<Map<String, String>> headers = (List<Map<String,String>>) ElementParameterParser.getObjectValue(node,"__RESPONSE_HEADERS__");
for (Map<String, String> header : headers) { %>
			if (<%=header.get("NAME") %>.equalsIgnoreCase(setCookieHeader)) {
				restProviderResponseHeader_cookies_<%=cid%>.append(<%=header.get("VALUE") %>);
				restProviderResponseHeader_cookies_<%=cid%>.append(";");
			} else {
				restProviderResponseHeaders_<%=cid%>.put(<%=header.get("NAME") %>, <%=header.get("VALUE") %>);
			}
<% } %>

		if (restProviderResponseHeader_cookies_<%=cid%>.length() > 0) {
			restProviderResponseHeaders_<%=cid%>.put(setCookieHeader, restProviderResponseHeader_cookies_<%=cid%>.toString());
		}

        java.util.Map<String, Object> restRequest_<%=cid%> = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_<%=cid%> = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_<%=cid%>.get("MESSAGE_CONTEXT");
        
        <%
        String jsonArrayKeys = ElementParameterParser.getValue(node,"__JSON_ARRAY_KEYS__");
        
        String REP = ElementParameterParser.getValue(node,"__REST_ENDPOINT__");
        
        System.out.println(REP+"<><>");
        
        if(jsonArrayKeys!=null && !jsonArrayKeys.trim().isEmpty()){ %>
            messageContext_<%=cid%>.put("json.array.keys",java.util.Arrays.asList(<%=jsonArrayKeys%>.split(" ")));
        <% } %>

		if (null == outputStream_<%=cid%>) {
			java.util.Map<String, Object> restResponse_<%=cid%> = new java.util.HashMap<String, Object>();
			restResponse_<%=cid%>.put("BODY", restProviderResponse_<%=cid%>);
			restResponse_<%=cid%>.put("STATUS", restProviderStatusCode_<%=cid%>);
			restResponse_<%=cid%>.put("HEADERS", restProviderResponseHeaders_<%=cid%>);
			restResponse_<%=cid%>.put("drop.json.root.element", Boolean.valueOf(<%=ElementParameterParser.getValue(node,"__UNWRAP_JSON_RESPONSE__")%>));
			globalMap.put("restResponse", restResponse_<%=cid%>);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_<%=cid%> = null;
			if (!responseAlreadySent_<%=cid%>) {
                org.apache.cxf.message.Message currentMessage = null;
                if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
                    org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
                } else {
                    currentMessage = ((org.apache.cxf.message.Message)restRequest_<%=cid%>.get("CURRENT_MESSAGE"));
                }

                currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);

				messageContext_<%=cid%>.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_<%=cid%>);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_<%=cid%> = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_<%=cid%>.entrySet()) {
					headersMultivaluedMap_<%=cid%>.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_<%=cid%>.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_<%=cid%>);

				// String responseContentType_<%=cid%> = (String) messageContext_<%=cid%>.get(org.apache.cxf.message.Message.CONTENT_TYPE);
                String responseContentType_<%=cid%> = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				if (null == responseContentType_<%=cid%>) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_<%=cid%> = messageContext_<%=cid%>.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_<%=cid%> = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_<%=cid%>);
				}
				globalMap.put("restResponseMediaType", responseMediaType_<%=cid%>);

				String responseMediaSubType_<%=cid%> = responseMediaType_<%=cid%>.getSubtype();
				if (responseMediaSubType_<%=cid%>.equals("xml") || responseMediaSubType_<%=cid%>.endsWith("+xml")) {
					outputStream_<%=cid%>.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_<%=cid%>.equals("json") || responseMediaSubType_<%=cid%>.endsWith("+json")) {
					outputStream_<%=cid%>.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_<%=cid%> = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_<%=cid%>) {
				String responseMediaSubType_<%=cid%> = responseMediaType_<%=cid%>.getSubtype();
				if (responseMediaSubType_<%=cid%>.equals("json") || responseMediaSubType_<%=cid%>.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_<%=cid%>.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_<%=cid%> = restProviderResponse_<%=cid%>.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_<%=cid%> = messageContext_<%=cid%>.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_<%=cid%> = messageBodyProviders_<%=cid%>.getMessageBodyWriter(
						responseBodyClass_<%=cid%>, responseBodyClass_<%=cid%>, null, responseMediaType_<%=cid%>);

                if (messageBodyWriter_<%=cid%> instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_<%=cid%>).setGlobalMap(globalMap);
                }

				messageBodyWriter_<%=cid%>.writeTo(restProviderResponse_<%=cid%>, responseBodyClass_<%=cid%>, responseBodyClass_<%=cid%>,
						new java.lang.annotation.Annotation[] {}, responseMediaType_<%=cid%>, null, outputStream_<%=cid%>);
			}
			// initial variant
			//outputStream_<%=cid%>.write(String.valueOf(restProviderResponse_<%=cid%>).getBytes());
			outputStream_<%=cid%>.flush();
		}
	}
<%
				} // (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))
			} // (null != conns && 0 < conns.size())
		} // (null != metadata)
	} // (null != metadatas && 0 < metadatas.size())
}
%>
